// ABSTRACT BASE CLASSES FOR WEAPONS AND WORLDWEAPONS
//~===================================================~

//base class from which weapon items will inherit
class doso_weap:weapon abstract{
	class<doso_weap_w> worldwpn;	//the world weapon to spawn in world!
	
	vector2 initangle;	//the readied angle to initialize to
	vector2 initpos;	//the readied position to initialize to
	
	property world:worldwpn;
	property angle:initangle;
	property pos:initpos;
	
	default{
		doso_weap.world "doso_weap_w";
		//angle and pos of all zero is considered to be straight ahead and pointed out; ie, a fuck-off stance
		doso_weap.angle (0.0, 0.0);
		doso_weap.pos (0.0, 0.0);
	}
	
	doso_weap_w child;
	vector2 weapangle;
	vector2 weappos;
	
	states{
	spawn:
		TNT1 A -1;
		stop;
	select:
		TNT1 A 0 {
			child = doso_weap_w.create(worldwpn,self);
			weapangle = initangle;
			weappos = initpos;
		}
		TNT1 A 0 A_Raise();
		wait;
	deselect:
		TNT1 A 0 A_Lower();
		wait;
	ready:
		TNT1 A 1 A_WeaponReady();
		loop;
	}
}

//base class from which held weapons in-world will inherit
class doso_weap_w:actor abstract{
	//here goes property variables and defaults
	double wpnmass;	//mass in kg
	uint8 massdist;	//how far out of 255 along the weapon's length the center of mass is
	
	uint8 bladecov;	//how much out of 255 of the weapon that is bladed (from the tip to the hands)
	uint8 bladestrt;//if non-zero, where the blade part of the weapon starts (from the tip to the hands)
	
	//note for sharpness: haft is considered to be 0.15 sharpness, which would need considerable force to wound.
	double tipsharp;//how sharp the tip of the weapon is. if 0, deemed to be unable to wound; if 1, deemed to be *very* thin/sharp
	double bldsharp;//how sharp the blade is. if 0, deemed to be blunt and unable to wound; if 1, deemed to be very fine and sharp
	
	uint wpnsize;	//length of the weapon in doom map units
	uint wpnwidth;	//width of the weapon, of course, in doom map units
	uint bladewidth;//width of the weapon's bladed segment, again in dmu
	
	uint8 maxextend;//how much farther beyond arm's length the weapon can be extended
	
	name wpnsprite;	//pretty self explanatory. weapons can change these on the fly if they really want to.
	
	property mass:wpnmass,massdist;
	property blade:bladecov,bladewidth;
	property bladestart:bladestrt;
	property size:wpnsize,wpnwidth;
	property sharpness:tipsharp,bldsharp;
	property maxextend:maxextend;
	property sprite:wpnsprite;
	
	default{
		+INTERPOLATEANGLES
		+FLATSPRITE
		+ROLLSPRITE
		+NOCLIP
		
		//doso_weap_w defaults
		doso_weap_w.mass 1.0,128;
		doso_weap_w.blade 0,8;
		doso_weap_w.bladestart 0;
		doso_weap_w.size 24,8;
		doso_weap_w.sharpness 0.15,0.15;
		doso_weap_w.maxextend 1;
		doso_weap_w.sprite 'tnt1';
	}
	
	//here goes logic variables and code
	doso_weap parent;
	halfsworder owner;
	
	static doso_weap_w Create(class<doso_weap_w> classname,doso_weap parent){
		doso_weap_w this = doso_weap_w(spawn(classname,parent.owner.pos,ALLOW_REPLACE));
		this.parent = parent;
		this.owner = parent.owner;
		this.angle = parent.owner.angle;
		this.pitch = parent.owner.pitch;
		return this;
	}
	
	void ChangeSprite(name spritename = "null"){
		if(spritename=="null"){
			spritename = default.wpnsprite;
		}
		wpnsprite = spritename;
		sprite = GetSpriteIndex(wpnsprite);
	}
}